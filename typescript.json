{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"In-test Jasmine Mock Response": {
		"prefix": "mr",
		"body": [
			"const ${1:return_value} = {} as ${2:return_data_type};",
			"${3:mock_class}.${4:mock_method}.and.returnValue(of(${1:return_value}));",
		],
		"description": "Inserts the code needed to set a Jasmine mock response inside of the test body."
	},

	"Jasmine describe block": {
		"prefix": "jd",
		"body": [
			"describe('${1:descriptive_text}', ($2) => {$0});",
		],
		"description": "Inserts an empty Jasmine 'describe' block."
	},

	"Jasmine it block": {
		"prefix": "ji",
		"body": [
			"it('should ${1:do_the_thang}', ($2) => {",
			"  //Arrange",
			"  $0",
			"  //Act",
			"",
			"  //Assert",
			"});"
		],
		"description": "Inserts an empty Jasmine 'it' block."
	},

	"Arrow (lambda) function (lambda)": {
		"prefix": "af",
		"body": [
			"($1) => {$0}",
		],
		"description": "Inserts an empty arrow (lambda) function."
	},

	"Jest mock function": {
		"prefix": "jf",
		"body": [
			"jest.fn()",
		],
		"description": "Inserts a mock jest function."
	}
}
